import os

########################################################################################
########################################################################################
# Meta info
DATA_ROOT = "../../data"
RAW_ROOT = os.path.join(DATA_ROOT, "raw")
PROCESSED_ROOT = os.path.join(DATA_ROOT, "processed")
OUTPUT_ROOT = os.path.join(PROCESSED_ROOT, "derived_metrics")

UNIVARIATE_ROOT = os.path.join(RAW_ROOT, "univariate", "alltime")

# These files contain the user distribution of each domain across different categories in the demographic dimensions.
UNIVARIATE_DISTRIBUTION_DATA = os.path.join(UNIVARIATE_ROOT, "distribution", "univariate_{demo}.parquet")
# These files contain the user distribution of all domains across different categories in the demographic dimensions and serve as the baseline.
UNIVARIATE_BASELINE_DATA = os.path.join(UNIVARIATE_ROOT, "baseline", "univariate_baseline_{demo}.parquet")

# For these demographic factors, we will calculate the KL divergence
MULTICATEGORY_DEMOS = ["state", "age", "race"]

# For these demographic factors, we will calculate the leaning score
BINARY_DEMOS = ["gender", "party", "partyreg"]

########################################################################################
########################################################################################
# Workflow

########################################################################################
# Multicategory KL divergence
KL_DIVERGENCE = os.path.join(OUTPUT_ROOT, "derived_{demo}_kl.parquet")

rule calculate_kl_divergence_all:
    input: expand(KL_DIVERGENCE, demo=MULTICATEGORY_DEMOS)

rule calcualte_kl_divergence:
    input: UNIVARIATE_DISTRIBUTION_DATA, UNIVARIATE_BASELINE_DATA
    params: "{demo}"
    output: KL_DIVERGENCE
    shell: "python calculate_kl_divergence.py {input} {params} {output}"

########################################################################################
########################################################################################
# Binary leaning score
LEANING_SCORE = os.path.join(OUTPUT_ROOT, "derived_{demo}_leaning.parquet")

# Define the mapping for binary categories
binary_category_mapping = {
    "gender": {
        "left": "Male",
        "right": "Female",
    },
    "party": {
        "left": "Democrat",
        "right": "Republican"
    },
    "partyreg": {
        "left": "Democrat",
        "right": "Republican"
    }
}

rule calculate_leaning_score_all:
    input: expand(LEANING_SCORE, demo=BINARY_DEMOS)

rule calculate_leaning_score:
    input: UNIVARIATE_DISTRIBUTION_DATA, UNIVARIATE_BASELINE_DATA
    params: "{demo}", lambda wildcards: binary_category_mapping[wildcards.demo]["left"], lambda wildcards: binary_category_mapping[wildcards.demo]["right"]
    output: LEANING_SCORE
    shell: "python calculate_leaning_score.py {input} {params} {output}"
